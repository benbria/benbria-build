#!/bin/bash

# TODO: Everything should use 'log()', not logger.

# Set defaults
PROJECT_NAME=''

INSTALL=false
QUIET=false

# Print usage instructions.
printUsage() {
  cat <<END
usage: `basename $0` [-hiq] [-n name]

Run this in your project's root.  This will run "npm install" if your
package.json has changed or if node_modules does not exist.  This will also
run "bundle install" if your Gemfile changes, and "bower install" if your
bower.json changes.

where:
    name  - The name to use when generating syslogs.  Will not generate
            syslogs if this is not specified.

Optional Arguments:
    -h        - Display this help message.
    -i        - Install packages.  If this is not specified, this will only
                report whether or not config files have changed.
    -q        - Quiet.

END
}

# Parse command line options.
while getopts hiqn: OPT; do
    case "$OPT" in
        h)
            printUsage
            exit 0
            ;;
        n)
            PROJECT_NAME=$OPTARG
            ;;
        i)
            INSTALL=true
            ;;
        q)
            QUIET=true
            ;;
        \?)
            # getopts issues an error message
            printUsage >&2
            exit 1
            ;;
    esac
done

# Remove the switches we parsed above.
shift `expr $OPTIND - 1`

# Access additional arguments as usual through
# variables $@, $*, $1, $2, etc. or using this loop:
for PARAM; do
    echo $PARAM
done


BUILD_DIR=build

LOG_PREFIX=
if [ -n "${PROJECT_NAME}" ]; then
    LOG_PREFIX="${PROJECT_NAME} - "
fi

log() {
    NOW=$(date +"%b-%d-%y %H:%M:%S")
    echo "${NOW}: ${LOG_PREFIX}$@" 1>&2;
    if [ -n "${PROJECT_NAME}" ]; then
        logger "${PROJECT_NAME} (install) $@"
    fi
}

log_error() {
    NOW=$(date +"%b-%d-%y %H:%M:%S")
    echo "${NOW}: ${LOG_PREFIX}$@" 1>&2;
    if [ -n "${PROJECT_NAME}" ]; then
        logger -p err "${PROJECT_NAME} (install) $@"
    fi
}

# Check for ruby and bundler first.
if ! which ruby > /dev/null || ! [[ $(ruby -v) =~ ^ruby\ 1.9 ]]; then
    echo -e "$SCRIPT_NAME error: you need ruby 1.9.$LINE_END"
    echo "Install or update with rvm, depending on your platform."
    echo "On mac, you can install rvm and ruby with:"
    echo "    $ '\curl -L https://get.rvm.io | bash -s stable'."
    echo "    $ source ~/.bash_profile"
    echo "    $ rvm install ruby-1.9.3-p327"
    echo "    $ rvm --default use ruby-1.9.3-p327"
    echo "    $ gem install bundler"
    echo
    echo "If you prefer rbenv, install it with:"
    echo "    $ brew install rbenv"
    echo "    $ rbenv install 1.9.3-p327"
    echo "    $ rbenv local 1.9.3-p327"
    echo "    $ gem install bundler"
    echo "    $ rbenv rehash"
    exit 1
fi

if ! which bundle > /dev/null ||
   (which rbenv > /dev/null && ! rbenv which bundle > /dev/null); then
    echo -e "$SCRIPT_NAME error: you need the ruby bundler gem.$LINE_END"
    echo "Try to install with 'gem install bundler'."
    echo "If you use rbenv, you must run 'rbenv rehash' after."
    exit 1
fi

# Run to see if package.json or npm-shrinkwrap.json have changed.
# Run with "install" to do an npm install and update md5 hashes.

# Compute MD5 hash of a given file.
# First paramter is the file to compute the MD5 has of.
# Prints the MD5 hash to stdout.
computeMD5()
{
    file=$1
    if [ `uname` == "Linux" ]
    then # Linux
        answer=`md5sum ${file} | awk '{print $1}'`
    else # Darwin (Mac)
        answer=`md5 -q ${file}`
    fi

    echo $answer
}

if $INSTALL; then
    mkdir -p ./build
fi

###########################
# npm
###########################
if [ -f package.json ]; then

    # Generate the new MD5 hashes
    newmd5=$(computeMD5 package.json)
    if [ -f npm-shrinkwrap.json ]; then
        newShrinkWrapMd5=$(computeMD5 npm-shrinkwrap.json)
    else
        newShrinkWrapMd5=''
    fi

    # Read in the old MD5 hashes
    oldmd5=`cat $BUILD_DIR/package.json.md5 2>/dev/null`
    if [ -f .npm-shrinkwrap.json.md5 ]; then
        oldShrinkWrapMd5=`cat $BUILD_DIR/npm-shrinkwrap.json.md5 2>/dev/null`
    else
        oldShrinkWrapMd5=''
    fi

    # Compare MD5 hashes...
    if [ "$oldmd5" != "$newmd5" -o "$oldShrinkWrapMd5" != "$newShrinkWrapMd5" -o ! -d 'node_modules' ]
    then
        if [ "$oldmd5" != "$newmd5" ]; then
            log package.json has changed.
        fi
        if [ "$oldShrinkWrapMd5" != "$newShrinkWrapMd5" ]; then
            log npm-shrinkwrap.json has changed.
        fi
        if $INSTALL; then
            log "Installing NPM modules."
            NPM_FLAGS=-d
            if $QUIET; then
                NPM_FLAGS=--silent
            fi

            if npm install $NPM_FLAGS; then
                echo > $BUILD_DIR/package.json.md5 $newmd5
                echo > $BUILD_DIR/npm-shrinkwrap.json.md5 $newShrinkWrapMd5
            else
                log_error "Installing NPM modules failed."
                if git status --porcelain package.json | grep 'package.json'
                then
                    echo it appears to be your fault...
                    git diff package.json
                else
                    echo I would blame this guy...
                    git log -p -1 package.json
                fi
                exit 1
            fi
        fi
    else
        log 'found no changes to package.json or npm-shrinkwrap.json'
    fi
fi

###########################
# bower
###########################
if [ -f bower.json ]; then

    # Generate the new MD5 hashes
    newBowerMd5=$(computeMD5 bower.json)

    # Read in the old MD5 hashes
    oldBowerMd5=`cat $BUILD_DIR/bower.json.md5 2>/dev/null`

    # Bower libraries
    if [ "$oldBowerMd5" != "$newBowerMd5" -o ! -d 'vendor/bower_components' ]
    then
        log 'bower.json has changed.'
        if $INSTALL; then
            log "Installing bower libraries."
            BOWER_FLAGS=
            if $QUIET; then
                BOWER_FLAGS=--silent
            fi
            if node_modules/bower/bin/bower --allow-root install $BOWER_FLAGS
            then
                echo > $BUILD_DIR/bower.json.md5 $newBowerMd5
            else
                log_error 'Install of bower component failed.'
                exit 1
            fi
        fi
    else
        log 'found no changes to bower.json'
    fi

fi

###########################
# Gemfile
###########################
if [ -f Gemfile ]; then

    # Generate the new MD5 hashes
    newGemMd5=$(computeMD5 Gemfile)

    # Read in the old MD5 hashes
    oldGemMd5=`cat $BUILD_DIR/Gemfile.md5 2>/dev/null`

    # Ruby Gems, via Bundler
    if [ "$oldGemMd5" != "$newGemMd5" -o ! -d 'vendor/gem-bin' -o ! -d 'vendor/bundle' ]
    then
        log 'Gemfile has changed.'
        if $INSTALL; then
            log "installing ruby gems to $(pwd)"
            if bundle install --binstubs=vendor/gem-bin --path vendor/bundle
            then
                echo > $BUILD_DIR/Gemfile.md5 $newGemMd5
            else
                log_error "installing ruby gems failed"
                exit 1
            fi
        fi
    else
        log 'found no changes to Gemfile'
    fi
fi