// Generated by CoffeeScript 1.7.1
(function() {
  'use strict';
  var async, commander, fs, log, makeFpPath, path, processCli, processFile, utils;

  async = require('async');

  commander = require('commander');

  fs = require('fs');

  log = require('yadsil')('fingerprint');

  path = require('path');

  utils = require('./utils');

  processCli = function() {
    commander.usage('<asset files>').option('-b, --base-path <path>', 'specify the path files are in').option('-o, --output <path>', 'specify an output file instead of stdout').option('--color', 'force color display out of a TTY').parse(process.argv);
    log.color(commander.color);
    return commander;
  };

  makeFpPath = function(filePath, digest) {
    var baseName, ext;
    ext = path.extname(filePath);
    baseName = filePath.substr(0, filePath.length - ext.length);
    return "" + baseName + "-" + digest + ext;
  };

  processFile = function(fingerprints, basePath, filePath, callback) {
    var virtualPath;
    if (filePath.substr(0, basePath.length) !== basePath) {
      return callback(new Error("out of base path: " + filePath));
    }
    virtualPath = filePath.substr(basePath.length);
    return utils.computeDigest(filePath, function(error, digest) {
      if (error) {
        return callback(error);
      }
      fingerprints[virtualPath] = makeFpPath(virtualPath, digest);
      return callback();
    });
  };

  (function() {
    var basePath, done, filePaths, fingerprints, forOne, okay, _ref;
    commander = processCli();
    filePaths = commander.args;
    fingerprints = {};
    okay = true;
    basePath = (_ref = commander.basePath) != null ? _ref : '';
    forOne = function(filePath, callback) {
      return processFile(fingerprints, basePath, filePath, function(err) {
        if (err) {
          log.error(err.message);
          okay = false;
        }
        return callback();
      });
    };
    done = function(error) {
      var output;
      if (error) {
        log.fatal(1, error.message);
      }
      output = JSON.stringify(fingerprints, null, 2) + '\n';
      if (!commander.output) {
        process.stdout.write(output);
      } else {
        fs.writeFileSync(commander.output, output, 'utf8');
      }
      if (!okay) {
        return process.exit(1);
      }
    };
    return async.forEachSeries(filePaths, forOne, done);
  })();

}).call(this);

//# sourceMappingURL=fingerprint.map
