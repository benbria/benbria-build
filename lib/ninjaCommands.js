// Generated by CoffeeScript 1.7.1
(function() {
  var fs, parentDirSync, path;

  path = require('path');

  fs = require('fs');

  parentDirSync = function(dir, fileToFind) {
    var answer, dirToCheck, existsSync, oldDirToCheck, _ref;
    existsSync = (_ref = fs.existsSync) != null ? _ref : path.existsSync;
    dirToCheck = path.resolve(dir);
    answer = null;
    while (true) {
      if (existsSync(path.join(dirToCheck, fileToFind))) {
        answer = dirToCheck;
        break;
      }
      oldDirToCheck = dirToCheck;
      dirToCheck = path.resolve(dirToCheck, "..");
      if (oldDirToCheck === dirToCheck) {
        break;
      }
    }
    return answer;
  };

  exports.findScript = function(scriptName, options) {
    var answer, scriptFullPath, scriptsDir;
    if (options == null) {
      options = {};
    }
    scriptsDir = path.resolve(__dirname, path.join("..", "lib/scripts"));
    scriptFullPath = path.resolve(scriptsDir, scriptName);
    if (!fs.existsSync(scriptFullPath)) {
      throw new Error("Could not find script " + scriptName);
    }
    if (options.ninjaFilePath != null) {
      answer = path.relative(options.ninjaFilePath, scriptFullPath);
    } else {
      answer = scriptFullPath;
    }
    return answer;
  };

  exports.findCommand = function(commandName, options) {
    var answer;
    if (options == null) {
      options = {};
    }
    answer = exports.findCommandIfExists(commandName, options);
    if (!answer) {
      throw new Error("Could not find command " + commandName);
    }
    return answer;
  };

  exports.findCommandIfExists = function(commandName, options) {
    var answer, commandFullPath, currentDir, done, nextDir;
    if (options == null) {
      options = {};
    }
    if (commandName === "loop-configure-ninja" && (options.configureNinjaScript != null)) {
      answer = options.configureNinjaScript;
    } else {
      answer = null;
      done = false;
      currentDir = options.fromDir || options.ninjaFilePath;
      if (currentDir == null) {
        throw new Error("Need option ninjaFilePath.");
      }
      while (!answer && !done) {
        currentDir = parentDirSync(currentDir, "node_modules");
        if (currentDir === null) {
          done = true;
        } else {
          commandFullPath = path.resolve(currentDir, path.join("node_modules", ".bin", commandName));
          if (fs.existsSync(commandFullPath)) {
            answer = commandFullPath;
          } else {
            nextDir = path.resolve(currentDir, '..');
            if (nextDir === currentDir) {
              done = true;
            }
            currentDir = nextDir;
          }
        }
      }
    }
    if (answer && (options.ninjaFilePath != null)) {
      answer = path.relative(options.ninjaFilePath, answer);
    }
    return answer;
  };

  exports.findLocalCommand = function(commandName, options) {
    var answer;
    if (options == null) {
      options = {};
    }
    answer = path.resolve(__dirname, path.join("..", "node_modules", ".bin", commandName));
    if (fs.existsSync(answer)) {
      if (options.ninjaFilePath != null) {
        answer = path.relative(options.ninjaFilePath, answer);
      }
    } else {
      answer = exports.findCommand(commandName, {
        ninjaFilePath: options.ninjaFilePath,
        configureNinjaScript: options.configureNinjaScript,
        fromDir: __dirname
      });
    }
    return answer;
  };

}).call(this);

//# sourceMappingURL=ninjaCommands.map
