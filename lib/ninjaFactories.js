// Generated by CoffeeScript 1.6.3
(function() {
  var allFactories, defineFactory, findCommandIfExists, findLocalCommand, findScript, fs, getCommand, isFactoryActive, ld, makeAssetEdgeFn, makeAssetRule, makeStreamlineFactory, path, _ref;

  path = require('path');

  ld = require('lodash');

  fs = require('fs');

  _ref = require('./ninjaCommands'), findCommandIfExists = _ref.findCommandIfExists, findScript = _ref.findScript, findLocalCommand = _ref.findLocalCommand;

  getCommand = function(config, log, commandName, desc) {
    var answer;
    if (desc == null) {
      desc = commandName;
    }
    answer = findCommandIfExists(commandName, config);
    if (!answer) {
      log.warn("" + commandName + " not found - disabling " + desc + " support.");
    }
    return answer;
  };

  allFactories = [];

  defineFactory = exports.defineFactory = function(name, factory) {
    factory.name = name;
    return allFactories.push(factory);
  };

  isFactoryActive = function(factory, config, log) {
    var active;
    active = false;
    if (!factory.active) {
      active = true;
    } else {
      if (ld.isFunction(factory.active)) {
        active = factory.active(config, log);
      } else {
        active = factory.active;
      }
    }
    return active;
  };

  exports.forEachFactory = function(fn) {
    var factory, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = allFactories.length; _i < _len; _i++) {
      factory = allFactories[_i];
      _results.push(fn(factory));
    }
    return _results;
  };

  exports.forActiveFactory = function(config, log, fn) {
    var factory, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = allFactories.length; _i < _len; _i++) {
      factory = allFactories[_i];
      if (isFactoryActive(factory, config, log)) {
        _results.push(fn(factory));
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  defineFactory("coffee", {
    initialize: function(ninja, config, log) {
      return this._command = getCommand(config, log, 'coffee');
    },
    active: function(config, log) {
      return this._command != null;
    },
    assignments: function(ninja, config) {
      return ninja.assign('coffee', this._command);
    },
    makeRules: function(ninja, config) {
      return ninja.rule('coffee').run('$coffee -c -m -o $outDir $in').description('COFFEE $in');
    },
    files: ['**/*.coffee', '**/*.litcoffee', '**/*.coffee.md'],
    makeSrcEdge: function(ninja, source, target) {
      ninja.edge(target).from(source).using('coffee').assign('outDir', path.dirname(target));
      return [target];
    }
  });

  defineFactory("js", {
    active: true,
    files: '**/*.js',
    assetFiles: 'js/**/[a-z0-9]*.js',
    makeSrcEdge: function(ninja, source, target) {
      ninja.edge(target).from(source).using('copy');
      return [target];
    },
    makeAssetEdge: function(ninja, source, target, releaseType) {
      return this.makeSrcEdge(ninja, source, target);
    }
  });

  makeStreamlineFactory = function(name, ext, commandName) {
    return {
      initialize: function(ninja, config, log) {
        return this._command = getCommand(config, log, commandName, name);
      },
      active: function(config, log) {
        return this._command != null;
      },
      assignments: function(ninja, config) {
        if (config.streamlineVersion < 10) {
          return ninja.assign(name, "node --harmony " + this._command);
        } else {
          return ninja.assign(name, this._command);
        }
      },
      makeRules: function(ninja, config) {
        var streamlineOpts;
        if (config.streamlineVersion < 10) {
          streamlineOpts = "-lp -c";
        } else {
          streamlineOpts = "-m -lp -c";
        }
        return ninja.rule(name).run("$" + name + " " + config.streamlineOpts + " " + streamlineOpts + " $in").description("" + (name.toUpperCase()) + " $in");
      },
      files: "**/*" + ext,
      makeSrcEdge: function(ninja, source, target) {
        var base, buildSource, mapFile, targetDir;
        targetDir = path.dirname(target);
        base = path.basename(target, ".js");
        buildSource = path.join(targetDir, "" + base + (path.extname(source)));
        mapFile = path.join(targetDir, "" + base + ".map");
        ninja.edge(buildSource).from(source).using("copy");
        ninja.edge(target).from(buildSource).using(name).assign("mapFile", mapFile);
        return [target];
      }
    };
  };

  defineFactory("jsStreamline", makeStreamlineFactory('jsStreamline', '._js', '_node'));

  defineFactory("coffeeStreamline", makeStreamlineFactory('coffeeStreamline', '._coffee', '_coffee'));

  makeAssetRule = function(ninja, name, releaseType, cli) {
    return ninja.rule("" + name + "-" + releaseType).run(cli).depfile('$out.d').description("(" + releaseType + ") " + (name.toUpperCase()) + " $in");
  };

  makeAssetEdgeFn = function(name) {
    return function(ninja, source, target, releaseType) {
      ninja.edge(target).from(source).using("" + name + "-" + releaseType);
      return [target];
    };
  };

  defineFactory("stylus", {
    initialize: function(ninja, config, log) {
      return this._command = getCommand(config, log, 'stylus');
    },
    active: function(config, log) {
      return this._command != null;
    },
    assignments: function(ninja, config) {
      return ninja.assign('stylus', this._command);
    },
    makeRules: function(ninja, config) {
      return ['debug', 'release'].forEach(function(releaseType) {
        var cli;
        cli = "$stylus $in -o $$(dirname $out) " + config.stylusOpts;
        cli += releaseType === 'release' ? ' --compress' : ' --line-numbers';
        cli += " > /dev/null && $buildCoffee " + (findScript("stylus-dep.coffee", config)) + " $in";
        cli += ' --dep-file $out.d $cliOptions';
        return makeAssetRule(ninja, 'stylus', releaseType, cli);
      });
    },
    assetFiles: '**/[a-z0-9]*.styl',
    targetExt: '.css',
    makeAssetEdge: makeAssetEdgeFn('stylus')
  });

  defineFactory("snockets", {
    assignments: function(ninja, config) {
      return ninja.assign('snockets', findLocalCommand('snockets', config));
    },
    makeRules: function(ninja, config) {
      return ['debug', 'release'].forEach(function(releaseType) {
        var cli;
        cli = "$snockets $cliOptions $in -o $out --dep-file $out.d";
        if (releaseType === 'release') {
          cli += ' --minify';
        }
        cli += " && " + (findLocalCommand('i18n-extract', config));
        cli += ' -f \'(i18n)\' -k \'$$1\' $out > $out.i18n';
        return makeAssetRule(ninja, 'snockets', releaseType, cli);
      });
    },
    assetFiles: 'js/**/[a-z0-9]*.coffee',
    makeAssetEdge: makeAssetEdgeFn('snockets')
  });

  defineFactory("coffeelint", {
    active: function(config, log) {
      return !config.noLint;
    },
    assignments: function(ninja, config) {
      return ninja.assign('coffeelint', "$buildCoffee " + (findScript("coffeelint.coffee", config)));
    },
    makeRules: function(ninja, config) {
      return ninja.rule("coffeelint").run("$coffeelint $cliOptions -c .coffeelint $in && touch $out").description("COFFEELINT $in");
    }
  });

}).call(this);
